// Code generated by MockGen. DO NOT EDIT.
// Source: company.go
//
// Generated by this command:
//
//	mockgen -source company.go -destination ../mock/http_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	credit "github.com/perebaj/credit"
	bureaus "github.com/perebaj/credit/bureaus"
	gomock "go.uber.org/mock/gomock"
)

// MockCompanyService is a mock of CompanyService interface.
type MockCompanyService struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyServiceMockRecorder
}

// MockCompanyServiceMockRecorder is the mock recorder for MockCompanyService.
type MockCompanyServiceMockRecorder struct {
	mock *MockCompanyService
}

// NewMockCompanyService creates a new mock instance.
func NewMockCompanyService(ctrl *gomock.Controller) *MockCompanyService {
	mock := &MockCompanyService{ctrl: ctrl}
	mock.recorder = &MockCompanyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyService) EXPECT() *MockCompanyServiceMockRecorder {
	return m.recorder
}

// SaveCompany mocks base method.
func (m *MockCompanyService) SaveCompany(ctx context.Context, company credit.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCompany", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCompany indicates an expected call of SaveCompany.
func (mr *MockCompanyServiceMockRecorder) SaveCompany(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCompany", reflect.TypeOf((*MockCompanyService)(nil).SaveCompany), ctx, company)
}

// MockBureauService is a mock of BureauService interface.
type MockBureauService struct {
	ctrl     *gomock.Controller
	recorder *MockBureauServiceMockRecorder
}

// MockBureauServiceMockRecorder is the mock recorder for MockBureauService.
type MockBureauServiceMockRecorder struct {
	mock *MockBureauService
}

// NewMockBureauService creates a new mock instance.
func NewMockBureauService(ctrl *gomock.Controller) *MockBureauService {
	mock := &MockBureauService{ctrl: ctrl}
	mock.recorder = &MockBureauServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBureauService) EXPECT() *MockBureauServiceMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockBureauService) Fetch(cnpj, cpf string) (bureaus.Empresa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", cnpj, cpf)
	ret0, _ := ret[0].(bureaus.Empresa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockBureauServiceMockRecorder) Fetch(cnpj, cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBureauService)(nil).Fetch), cnpj, cpf)
}
